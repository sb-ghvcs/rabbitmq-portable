name: Build Release

on:
  workflow_dispatch:
    inputs:
      msvcpp_redist_url:
        description: "Url to Microsoft Visual C++ redistributable"
        required: true
      windows_openssl_url:
        description: "Url to OpenSSL Installer for Windows"
        required: true


jobs:
  build-linux-release:
    runs-on: ubuntu-latest
    steps:
      - name: Setup dependencies
        run: |
          sudo apt update
          sudo apt upgrade -y
          # Github's runner environment already has tar, make, and gcc installed
          # Install perl
          sudo apt install -y perl
          # Instal ncurses headers
          sudo apt-get install -y ncurses-dev
          # Install OpenSSL and Development Headers
          sudo apt install -y openssl libssl-dev
      - name: Verify Dependencies
        run: |
          tar --version
          make --version
          gcc --version
          perl --version
          openssl version
      - name: Checkout Erlang
        uses: actions/checkout@v4
        with:
          repository: erlang/otp
      - name: Move Erlang Source
        run: |
          mkdir -p otp
          shopt -s extglob  # Enable extended pattern matching operators
          mv !(otp) otp/ 
      - name: Configure Erlang Build
        run: |
          cd otp
          export ERL_TOP=`pwd`
          ./configure
      - name: Build Erlang
        run: |
          cd otp
          export ERL_TOP=`pwd`
          make
      - name: Test Erlang
        run: |
          cd otp
          export ERL_TOP=`pwd`
          make release_tests
          cd release/tests/test_server
          $ERL_TOP/bin/erl -s ts install -s ts smoke_test batch -s init stop
      - name: Install Erlang in folder
        run: |
          cd otp
          export ERL_TOP=`pwd`
          make install
      - name: Verify Erlang Build
        run: |
          cd erlang
          ls -lA

  build-windows-release:
    runs-on: windows-latest
    steps:
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Setup make and gcc
        uses: cygwin/cygwin-install-action@v4 
        with:
          platform: x86_64
          packages: make gcc-g++
      - name: Setup msvc++
        run: |
          $redistUrl = '${{ github.event.inputs.msvcpp_redist_url }}'
          Invoke-WebRequest -Uri $redistUrl -OutFile 'vcredist.exe'
          Write-Output 'Downloaded MSVC++ redistributable.'
          Start-Process -FilePath "vcredist.exe" -ArgumentList '/quiet', '/norestart' -Wait
          Write-Output 'Installed MSVC++ redistributable.'
      - name: Setup OpenSSL
        run: |
          # Install OpenSSL and Development Headers
          $installerUrl = '${{ github.event.inputs.windows_openssl_url }}'
          Invoke-WebRequest -Uri $installerUrl -OutFile 'openssl_installer.exe'
          Write-Output 'Downloaded OpenSSL installer.'
          Start-Process -FilePath 'openssl_installer.exe' -ArgumentList '/silent' -Wait
          Write-Output 'Installed OpenSSL.'
      - name: Verify Dependencies
        run: |
          make --version
          gcc --version
          cl.exe
      - name: Checkout Erlang
        uses: actions/checkout@v4
        with:
          repository: erlang/otp
      - name: Move Erlang Source
        run: |
          # Create the new subfolder if it doesn't exist
          $otp = "./otp"
          if (-not (Test-Path -Path $otp)) {
              New-Item -ItemType Directory -Path $otp
          }

          # Move all items from the current directory to the new subfolder
          Get-ChildItem -Path . -Exclude otp | Move-Item -Destination $otp
      - name: Configure Erlang Build
        shell: bash
        run: |
          ls -lA
          mkdir erlang
          cd otp
          export ERL_TOP=`pwd`
          eval `./otp_build env_win32 x64`
          ./otp_build configure
      - name: Build Erlang
        shell: bash
        run: |
          cd otp
          export ERL_TOP=`pwd`
          ./otp_build boot -a
          ./otp_build release -a
      - name: Verify Erlang Build
        shell: bash
        run: |
          cd otp/release
          ls -lA
          cd win32
          ls -lA
