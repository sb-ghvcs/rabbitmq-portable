name: Build Release

on:
  workflow_dispatch:

jobs:
  build-linux-release:
    runs-on: ubuntu-latest
    steps:
      - name: Setup dependencies
        run: |
          sudo apt update
          sudo apt upgrade -y
          # Github's runner environment already has tar, make, and gcc installed
          # Install perl
          sudo apt install -y perl
          # Instal ncurses headers
          sudo apt-get install -y ncurses-dev
          # Install OpenSSL and Development Headers
          sudo apt install -y openssl libssl-dev
      - name: Verify Dependencies
        run: |
          tar --version
          make --version
          gcc --version
          perl --version
          openssl version
      - name: Download Erlang Source
        uses: actions/download-artifact@v4
        with:
          repository: erlang/otp
          pattern: otp_src_*.tar.gz
      - name: Get Erlang Source Version
        id: erlang-version
        run: |
          filename=$(ls otp_src_*.tar.gz 2>/dev/null)
          version=$(echo "$filename" | grep -oP '\d+\.\d+\.\d+')
          echo "ERLANG_SOURCE_DIR=otp_src_$version" >> $GITHUB_OUTPUT
      - name: Configure Erlang Build
        run: |
          tar -zxf otp.tar.gz
          cd ${{ steps.erlang-version.outputs.ERLANG_SOURCE_DIR }}
          export ERL_TOP=`pwd`
          ./configure --prefix=$(readlink -f "../erlang")
      - name: Build Erlang
        run: |
          cd ${{ steps.erlang-version.outputs.ERLANG_SOURCE_DIR }}
          export ERL_TOP=`pwd`
          make
      - name: Install Erlang in folder
        run: |
          cd ${{ steps.erlang-version.outputs.ERLANG_SOURCE_DIR }}
          export ERL_TOP=`pwd`
          make install
      - name: Verify Erlang Build
        run: |
          ls -lA
          cd erlang
          ls -lA

  build-windows-release:
    defaults:
      run:
        shell: wsl-bash {0}
    runs-on: windows-2022
    steps:
      - uses: Vampire/setup-wsl@v3.1.1
        with:
          distribution: Ubuntu-18.04
      - name: Install WSL dependencies
        run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip
      - name: Install openssl
        shell: cmd
        run: |
          choco install openssl --version=3.1.1
          IF EXIST "c:\\Program Files\\OpenSSL-Win64" (move "c:\\Program Files\\OpenSSL-Win64" "c:\\OpenSSL-Win64") ELSE (move "c:\\Program Files\\OpenSSL" "c:\\OpenSSL-Win64")
      - name: Download Erlang Source
        uses: actions/download-artifact@v4
        with:
          repository: erlang/otp
          pattern: otp_src_*.tar.gz
      - name: Get Erlang Source Version
        id: erlang-version
        run: |
          filename=$(ls otp_src_*.tar.gz 2>/dev/null)
          version=$(echo "$filename" | grep -oP '\d+\.\d+\.\d+')
          echo "ERLANG_SOURCE_DIR=otp_src_$version" >> $GITHUB_OUTPUT
      - name: Compile Erlang
        run: |
          tar -zxf otp.tar.gz
          cd ${{ steps.erlang-version.outputs.ERLANG_SOURCE_DIR }}
          export ERL_TOP=`pwd`
          export MAKEFLAGS=-j$(($(nproc) + 2))
          export ERLC_USE_SERVER=true
          export ERTS_SKIP_DEPEND=true
          eval `./otp_build env_win32 x64`
          ./otp_build configure
          if cat erts/CONF_INFO ||
             grep -v "Static linking with OpenSSL 3.0" lib/*/CONF_INFO ||
             cat lib/*/SKIP ||
             cat lib/SKIP-APPLICATIONS; then
             exit 1
          fi
          ./otp_build boot -a
          ./otp_build release -a
      - name: Verify Erlang Build
        run: |
          cd ${{ steps.erlang-version.outputs.ERLANG_SOURCE_DIR }}
          cd release
          ls -lA
          cd win32
          ls -lA