name: Build Release

on:
  workflow_dispatch:
    inputs:
      windows_openssl_url:
        description: "Url to OpenSSL Installer for Windows"
        required: true


jobs:
  # build-linux-release:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup dependencies
  #       run: |
  #         sudo apt update
  #         sudo apt upgrade -y
  #         # Github's runner environment already has tar, make, and gcc installed
  #         # Install perl
  #         sudo apt install -y perl
  #         # Instal ncurses headers
  #         sudo apt-get install -y ncurses-dev
  #         # Install OpenSSL and Development Headers
  #         sudo apt install -y openssl libssl-dev
  #     - name: Verify Dependencies
  #       run: |
  #         tar --version
  #         make --version
  #         gcc --version
  #         perl --version
  #         openssl version
  #     - name: Checkout Erlang
  #       uses: actions/checkout@v4
  #       with:
  #         repository: erlang/otp
  #     - name: Move Erlang Source
  #       run: |
  #         mkdir -p otp
  #         shopt -s extglob  # Enable extended pattern matching operators
  #         mv !(otp) otp/ 
  #     - name: Configure Erlang Build
  #       run: |
  #         cd otp
  #         export ERL_TOP=`pwd`
  #         ./configure
  #     - name: Build Erlang
  #       run: |
  #         cd otp
  #         export ERL_TOP=`pwd`
  #         make
  #     - name: Test Erlang
  #       run: |
  #         cd otp
  #         export ERL_TOP=`pwd`
  #         make release_tests
  #         cd release/tests/test_server
  #         $ERL_TOP/bin/erl -s ts install -s ts smoke_test batch -s init stop
  #     - name: Install Erlang in folder
  #       run: |
  #         cd otp
  #         export ERL_TOP=`pwd`
  #         make install
  #     - name: Verify Erlang Build
  #       run: |
  #         cd erlang
  #         ls -lA

  build-windows-release:
    runs-on: windows-latest
    steps:
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Setup OpenSSL
        run: |
          # Install OpenSSL and Development Headers
          $installerUrl = '${{ github.event.inputs.windows_openssl_url }}'
          Invoke-WebRequest -Uri $installerUrl -OutFile 'openssl_installer.exe'
          Write-Output 'Downloaded OpenSSL installer.'
          Start-Process -FilePath 'openssl_installer.exe' -ArgumentList '/silent', '/DIR=C:\OpenSSL-Win64' -Wait
          Write-Output 'Installed OpenSSL to C:\OpenSSL-Win64.'
      - name: Setup WSL
        uses: Vampire/setup-wsl@v3
      - name: Install build tools
        shell: wsl-bash {0}
        run: |
          sudo apt update && sudo apt install -y g++-mingw-w64 gcc-mingw-w64 make
      - name: Checkout Erlang
        uses: actions/checkout@v4
        with:
          repository: erlang/otp
      - name: Move Erlang Source
        shell: wsl-bash {0}
        run: |
          mkdir -p /mnt/c/src/otp
          mv * /mnt/c/src/otp/
      - name: Configure Erlang Build
        run: |
          export PATH
          export ERL_TOP=/mnt/c/src/otp
          cd $ERL_TOP
          echo "ERL_TOP=$ERL_TOP"
          where bash
          pwd
          eval `./otp_build env_win32 x64`
          ./otp_build configure
      - name: If Configure Failed
        if: failure()
        shell: wsl-bash {0}
        run: |
          export ERL_TOP=/mnt/c/src/otp
          cd $ERL_TOP
          cat config.log
      - name: Build Erlang
        run: |
          export PATH
          export ERL_TOP=/mnt/c/src/otp
          cd $ERL_TOP
          ./otp_build boot -a
          ./otp_build release -a
      - name: Verify Erlang Build
        run: |
          export ERL_TOP=/mnt/c/src/otp
          cd $ERL_TOP
          cd release
          ls -lA
          cd win32
          ls -lA
